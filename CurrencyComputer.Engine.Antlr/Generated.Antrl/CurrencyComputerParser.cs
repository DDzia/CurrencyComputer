//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CurrencyComputer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CurrencyComputerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		DECIMAL=10, DECIMAL_WITH_NEGATIVE_SIGN=11, DECIMAL_WITHOUT_SIGN=12, DIGIT=13, 
		DIGIT_19=14, Space=15;
	public const int
		RULE_input = 0, RULE_expression = 1, RULE_operator = 2, RULE_amount = 3, 
		RULE_currency = 4, RULE_number = 5, RULE_conversion = 6;
	public static readonly string[] ruleNames = {
		"input", "expression", "operator", "amount", "currency", "number", "conversion"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'-'", "'+'", "'eur'", "'r'", "'$'", "'ToEuro'", "'ToDollar'", 
		"'ToRub'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "DECIMAL", 
		"DECIMAL_WITH_NEGATIVE_SIGN", "DECIMAL_WITHOUT_SIGN", "DIGIT", "DIGIT_19", 
		"Space"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CurrencyComputer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CurrencyComputerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CurrencyComputerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CurrencyComputerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConversionContext conversion() {
			return GetRuleContext<ConversionContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; expression();
			State = 15; Match(T__0);
			State = 16; conversion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AmountContext[] amount() {
			return GetRuleContexts<AmountContext>();
		}
		public AmountContext amount(int i) {
			return GetRuleContext<AmountContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			State = 26;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18; amount();
				State = 19; @operator();
				State = 20; expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22; amount();
				State = 23; @operator();
				State = 24; amount();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			_la = TokenStream.LA(1);
			if ( !(_la==T__1 || _la==T__2) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public CurrencyContext currency() {
			return GetRuleContext<CurrencyContext>(0);
		}
		public AmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amount; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountContext amount() {
		AmountContext _localctx = new AmountContext(Context, State);
		EnterRule(_localctx, 6, RULE_amount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; number();
			State = 31; currency();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrencyContext : ParserRuleContext {
		public CurrencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currency; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrencyContext currency() {
		CurrencyContext _localctx = new CurrencyContext(Context, State);
		EnterRule(_localctx, 8, RULE_currency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(CurrencyComputerParser.DECIMAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 10, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionContext : ParserRuleContext {
		public ConversionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionContext conversion() {
		ConversionContext _localctx = new ConversionContext(Context, State);
		EnterRule(_localctx, 12, RULE_conversion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', '*', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1D', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x2', '\x2', '\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x2', '\x5', '\x3', '\x2', '\x4', '\x5', '\x3', '\x2', '\x6', 
		'\b', '\x3', '\x2', '\t', '\v', '\x2', '#', '\x2', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\b', ' ', '\x3', '\x2', '\x2', '\x2', '\n', 
		'#', '\x3', '\x2', '\x2', '\x2', '\f', '%', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\'', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\x5', '\x4', 
		'\x3', '\x2', '\x11', '\x12', '\a', '\x3', '\x2', '\x2', '\x12', '\x13', 
		'\x5', '\xE', '\b', '\x2', '\x13', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x15', '\x5', '\b', '\x5', '\x2', '\x15', '\x16', '\x5', '\x6', 
		'\x4', '\x2', '\x16', '\x17', '\x5', '\x4', '\x3', '\x2', '\x17', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x5', '\b', '\x5', '\x2', 
		'\x19', '\x1A', '\x5', '\x6', '\x4', '\x2', '\x1A', '\x1B', '\x5', '\b', 
		'\x5', '\x2', '\x1B', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\t', '\x2', 
		'\x2', '\x2', '\x1F', '\a', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x5', 
		'\f', '\a', '\x2', '!', '\"', '\x5', '\n', '\x6', '\x2', '\"', '\t', '\x3', 
		'\x2', '\x2', '\x2', '#', '$', '\t', '\x3', '\x2', '\x2', '$', '\v', '\x3', 
		'\x2', '\x2', '\x2', '%', '&', '\a', '\f', '\x2', '\x2', '&', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\t', '\x4', '\x2', '\x2', '(', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x1C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
