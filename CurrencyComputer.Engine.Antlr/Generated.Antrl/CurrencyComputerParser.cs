//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CurrencyComputer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CurrencyComputerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, DECIMAL_WITH_NEGATIVE_SIGN=11, DECIMAL_WITHOUT_SIGN=12, DIGIT=13, 
		DIGIT_19=14, Space=15;
	public const int
		RULE_input = 0, RULE_expression = 1, RULE_operator = 2, RULE_amountComposite = 3, 
		RULE_amountConvertible = 4, RULE_amountConvertibleBase = 5, RULE_amount = 6, 
		RULE_currency = 7, RULE_number = 8, RULE_conversion = 9;
	public static readonly string[] ruleNames = {
		"input", "expression", "operator", "amountComposite", "amountConvertible", 
		"amountConvertibleBase", "amount", "currency", "number", "conversion"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'-'", "'+'", "':'", "'eur'", "'r'", "'$'", "'ToEuro'", "'ToDollar'", 
		"'ToRub'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "DECIMAL_WITH_NEGATIVE_SIGN", 
		"DECIMAL_WITHOUT_SIGN", "DIGIT", "DIGIT_19", "Space"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CurrencyComputer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CurrencyComputerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CurrencyComputerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CurrencyComputerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConversionContext conversion() {
			return GetRuleContext<ConversionContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; expression();
			State = 21; Match(T__0);
			State = 22; conversion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AmountCompositeContext[] amountComposite() {
			return GetRuleContexts<AmountCompositeContext>();
		}
		public AmountCompositeContext amountComposite(int i) {
			return GetRuleContext<AmountCompositeContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			State = 32;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; amountComposite();
				State = 25; @operator();
				State = 26; expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28; amountComposite();
				State = 29; @operator();
				State = 30; amountComposite();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			_la = TokenStream.LA(1);
			if ( !(_la==T__1 || _la==T__2) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountCompositeContext : ParserRuleContext {
		public AmountContext amount() {
			return GetRuleContext<AmountContext>(0);
		}
		public AmountConvertibleContext amountConvertible() {
			return GetRuleContext<AmountConvertibleContext>(0);
		}
		public AmountCompositeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amountComposite; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmountComposite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountCompositeContext amountComposite() {
		AmountCompositeContext _localctx = new AmountCompositeContext(Context, State);
		EnterRule(_localctx, 6, RULE_amountComposite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 36; amount();
				}
				break;
			case 2:
				{
				State = 37; amountConvertible();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountConvertibleContext : ParserRuleContext {
		public AmountConvertibleBaseContext amountConvertibleBase() {
			return GetRuleContext<AmountConvertibleBaseContext>(0);
		}
		public ConversionContext conversion() {
			return GetRuleContext<ConversionContext>(0);
		}
		public AmountConvertibleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amountConvertible; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmountConvertible(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountConvertibleContext amountConvertible() {
		AmountConvertibleContext _localctx = new AmountConvertibleContext(Context, State);
		EnterRule(_localctx, 8, RULE_amountConvertible);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; amountConvertibleBase();
			State = 41; Match(T__3);
			State = 42; conversion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountConvertibleBaseContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public CurrencyContext currency() {
			return GetRuleContext<CurrencyContext>(0);
		}
		public AmountConvertibleBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amountConvertibleBase; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmountConvertibleBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountConvertibleBaseContext amountConvertibleBase() {
		AmountConvertibleBaseContext _localctx = new AmountConvertibleBaseContext(Context, State);
		EnterRule(_localctx, 10, RULE_amountConvertibleBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; number();
			State = 45; currency();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public CurrencyContext currency() {
			return GetRuleContext<CurrencyContext>(0);
		}
		public AmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amount; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountContext amount() {
		AmountContext _localctx = new AmountContext(Context, State);
		EnterRule(_localctx, 12, RULE_amount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; number();
			State = 48; currency();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrencyContext : ParserRuleContext {
		public CurrencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currency; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrencyContext currency() {
		CurrencyContext _localctx = new CurrencyContext(Context, State);
		EnterRule(_localctx, 14, RULE_currency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode DECIMAL_WITHOUT_SIGN() { return GetToken(CurrencyComputerParser.DECIMAL_WITHOUT_SIGN, 0); }
		public ITerminalNode DECIMAL_WITH_NEGATIVE_SIGN() { return GetToken(CurrencyComputerParser.DECIMAL_WITH_NEGATIVE_SIGN, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 16, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_la = TokenStream.LA(1);
			if ( !(_la==DECIMAL_WITH_NEGATIVE_SIGN || _la==DECIMAL_WITHOUT_SIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionContext : ParserRuleContext {
		public ConversionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionContext conversion() {
		ConversionContext _localctx = new ConversionContext(Context, State);
		EnterRule(_localctx, 18, RULE_conversion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', ';', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '#', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', ')', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x2', '\x2', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x2', '\x6', '\x3', '\x2', '\x4', '\x5', '\x3', 
		'\x2', '\a', '\t', '\x3', '\x2', '\r', '\xE', '\x3', '\x2', '\n', '\f', 
		'\x2', '\x32', '\x2', '\x16', '\x3', '\x2', '\x2', '\x2', '\x4', '\"', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '$', '\x3', '\x2', '\x2', '\x2', '\b', 
		'(', '\x3', '\x2', '\x2', '\x2', '\n', '*', '\x3', '\x2', '\x2', '\x2', 
		'\f', '.', '\x3', '\x2', '\x2', '\x2', '\xE', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x34', '\x3', '\x2', '\x2', '\x2', '\x12', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x38', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x17', '\x5', '\x4', '\x3', '\x2', '\x17', '\x18', '\a', '\x3', '\x2', 
		'\x2', '\x18', '\x19', '\x5', '\x14', '\v', '\x2', '\x19', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1B', '\x5', '\b', '\x5', '\x2', '\x1B', 
		'\x1C', '\x5', '\x6', '\x4', '\x2', '\x1C', '\x1D', '\x5', '\x4', '\x3', 
		'\x2', '\x1D', '#', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x5', 
		'\b', '\x5', '\x2', '\x1F', ' ', '\x5', '\x6', '\x4', '\x2', ' ', '!', 
		'\x5', '\b', '\x5', '\x2', '!', '#', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\"', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '#', '\x5', '\x3', '\x2', '\x2', '\x2', '$', '%', '\t', '\x2', 
		'\x2', '\x2', '%', '\a', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x5', 
		'\xE', '\b', '\x2', '\'', ')', '\x5', '\n', '\x6', '\x2', '(', '&', '\x3', 
		'\x2', '\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', ')', '\t', 
		'\x3', '\x2', '\x2', '\x2', '*', '+', '\x5', '\f', '\a', '\x2', '+', ',', 
		'\a', '\x6', '\x2', '\x2', ',', '-', '\x5', '\x14', '\v', '\x2', '-', 
		'\v', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x5', '\x12', '\n', '\x2', 
		'/', '\x30', '\x5', '\x10', '\t', '\x2', '\x30', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\x5', '\x12', '\n', '\x2', '\x32', '\x33', '\x5', 
		'\x10', '\t', '\x2', '\x33', '\xF', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\t', '\x3', '\x2', '\x2', '\x35', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x37', '\t', '\x4', '\x2', '\x2', '\x37', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\t', '\x5', '\x2', '\x2', '\x39', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x4', '\"', '(',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
